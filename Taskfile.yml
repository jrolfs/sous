version: '2'

expansions: 10
vars:
  PGPORT: 6543
  HOSTNAME:
    sh: hostname
  XDG_DATA_HOME:
    sh: echo "$HOME/.local/share"
  DEV_DOCKER_POSTGRES_DIR: "{{.XDG_DATA_HOME}}/sous/postgres_docker"
  DEV_DOCKER_POSTGRES_DATA_DIR: "{{.DEV_DOCKER_POSTGRES_DIR}}/data"
  DB_NAME: sous
  TEST_DB_NAME: sous_test_template
  LIQUIBASE_DEFAULTS: ./dev_support/liquibase/liquibase.properties
  LIQUIBASE_SERVER: "jdbc:postgresql://{{.HOSTNAME}}:{{.PGPORT}}"
  LIQUIBASE_SHARED_FLAGS: --changeLogFile=database/changelog.xml --defaultsFile=./dev_support/liquibase/liquibase.properties
  LIQUIBASE_URL: "{{.LIQUIBASE_SERVER}}/{{.DB_NAME}}?user=postgres"
  LIQUIBASE_FLAGS: "--url {{.LIQUIBASE_URL}} {{.LIQUIBASE_SHARED_FLAGS}}"
  LIQUIBASE_TEST_URL: "{{.LIQUIBASE_SERVER}}/{{.TEST_DB_NAME}}?user=postgres"
  LIQUIBASE_TEST_FLAGS: "--url {{.LIQUIBASE_TEST_URL}} {{.LIQUIBASE_SHARED_FLAGS}}"
  TC_TEMP_DIR: "/tmp/sous_{{uuidv4}}"
  USER_ID:
    sh: id -u
  GROUP_ID:
    sh: id -g
  USER_NAME: postgres
  SOUS_TC_PACKAGES:
    sh: make export-SOUS_TC_PACKAGES
  HARD_CODE: github.com/opentable/sous/cli github.com/opentable/sous/cli/tests github.com/opentable/sous/config github.com/opentable/sous/ext/docker github.com/opentable/sous/ext/git github.com/opentable/sous/ext/github github.com/opentable/sous/ext/otpl github.com/opentable/sous/ext/singularity github.com/opentable/sous/ext/storage github.com/opentable/sous/graph github.com/opentable/sous/lib github.com/opentable/sous/server github.com/opentable/sous/test github.com/opentable/sous/test/smoke github.com/opentable/sous/util/blueprints/cmap github.com/opentable/sous/util/cmdr github.com/opentable/sous/util/configloader github.com/opentable/sous/util/docker_registry github.com/opentable/sous/util/firsterr github.com/opentable/sous/util/logging github.com/opentable/sous/util/logging/messages github.com/opentable/sous/util/restful github.com/opentable/sous/util/restful/restfultest github.com/opentable/sous/util/shell github.com/opentable/sous/util/shelltest github.com/opentable/sous/util/sqlgen github.com/opentable/sous/util/validator github.com/opentable/sous/util/whitespace github.com/opentable/sous/util/yaml
  UNIT_TEST_RUN: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/go/src/github.com/opentable/sous -w /go/src/github.com/opentable/sous --privileged=true golang:1.10 go test -v -race
  QA_DESC_FILE: qa_desc.json
  SOUS_QA_DESC:
    sh: echo "$PWD/{{.QA_DESC_FILE}}"
  INTEGRATION_TEST_RUN: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -e "SOUS_QA_DESC=/go/src/github.com/opentable/sous/{{.QA_DESC_FILE}}" -v $PWD:/go/src/github.com/opentable/sous -w /go/src/github.com/opentable/sous --privileged=true golang:1.10 go test -v ./integration --tags=integration

tasks:

  print:
    cmds:
      - echo "PGPORT = {{.PGPORT}}"
      - echo "HOSTNAME = {{.HOSTNAME}}"
      - echo "XDG_DATA_HOME = {{.XDG_DATA_HOME}}"
      - echo "DEV_DOCKER_POSTGRES_DIR = {{.DEV_DOCKER_POSTGRES_DIR}}"
      - echo "DEV_DOCKER_POSTGRES_DATA_DIR = {{.DEV_DOCKER_POSTGRES_DATA_DIR}}"
      - echo "DB_NAME = {{.DB_NAME}}"
      - echo "TEST_DB_NAME = {{.TEST_DB_NAME}}"
      - echo "LIQUIBASE_DEFAULTS = {{.LIQUIBASE_DEFAULTS}}"
      - echo "LIQUIBASE_SERVER = {{.LIQUIBASE_SERVER}}"
      - echo "LIQUIBASE_SHARED_FLAGS = {{.LIQUIBASE_SHARED_FLAGS}}"
      - echo "LIQUIBASE_URL = {{.LIQUIBASE_URL}}"
      - echo "LIQUIBASE_FLAGS = {{.LIQUIBASE_FLAGS}}"
      - echo "LIQUIBASE_TEST_URL = {{.LIQUIBASE_TEST_URL}}"
      - echo "LIQUIBASE_TEST_FLAGS = {{.LIQUIBASE_TEST_FLAGS}}"
      - echo "USER_ID = {{.USER_ID}}"
      - echo "GROUP_ID = {{.GROUP_ID}}"
      - echo "USER_NAME = {{.USER_NAME}}"
      - echo "TC_TEMP_DIR= {{.TC_TEMP_DIR}}"
      - echo "SOUS_TC_PACKAGES = {{.SOUS_TC_PACKAGES}}"
      - echo "HARD_CODE = {{.HARD_CODE}}"
      - echo "UNIT_TEST_RUN = {{.UNIT_TEST_RUN}}"
      - echo "QA_DESC_FILE = {{.QA_DESC_FILE}}"
      - echo "SOUS_QA_DESC = {{.SOUS_QA_DESC}}"
      - echo "INTEGRATION_TEST_RUN = {{.INTEGRATION_TEST_RUN}}"
    silent: true

  install:
    desc: runs make install-dev
    cmds:
      - make install-dev

  test:
    deps: [postgres-start]
    cmds:
      - "{{.UNIT_TEST_RUN}} {{.HARD_CODE}}"

  test-tc-sous-packages:
    cmds:
      - task: test-tc
        vars: {HARD_CODE: "{{.SOUS_TC_PACKAGES}}"}


  test-tc:
    deps: [postgres-start]
    cmds:
      - "{{.UNIT_TEST_RUN}} {{.HARD_CODE}} | ./bin/gotest-to-teamcity"


  unit:
    deps: [postgres-start]
    desc: runs make test-unit (with no postgres start)
    cmds:
      - make test-unit-base

  clean-containers:
    desc: runs make clean-running-containers
    cmds:
      - make clean-running-containers

  sous-qa-setup:
    desc: setup for integration runs
    cmds:
      - rm -f {{.SOUS_QA_DESC}}
      - ./bin/sous_qa_tc_setup --compose-dir ./integration/test-registry/ --out-path={{.SOUS_QA_DESC}}

  containers:
    desc: runs docker-compose up on test-registry folder, also cleans containers first
    deps: [clean-containers]
    dir: ./integration/test-registry
    cmds:
      - docker-compose up -d

  integration-tc:
    desc: runs test-integration from make file
    cmds:
      - task: sous-qa-setup
      - cd ./integration/test-registry && docker-compose up -d
      - "{{.INTEGRATION_TEST_RUN}} | ./bin/gotest-to-teamcity"

  integration:
    desc: cleans, docker-compose, then runs make test-integration
    deps: [containers]
    cmds:
      - make test-integration

  postgres-stop:
    desc: stop docker postgres
    cmds:
      - docker stop postgres > /dev/null 2>&1 || true

  postgres-start:
    desc: create db and liquibase
    cmds:
      - task: postgres-start-image
      - task: postgres-start-base
        vars: {HOSTNAME: localhost}

  postgres-start-base:
    cmds:
      - docker run --net=host postgres:10.3 createdb -h {{.HOSTNAME}} -p {{.PGPORT}} -U {{.USER_NAME}} -w {{.TEST_DB_NAME}} > /dev/null 2>&1 || true
      - docker run --net=host --rm -e CHANGELOG_FILE=changelog.xml -v $PWD/database:/changelogs -e "URL={{.LIQUIBASE_TEST_URL}}" docker.otenv.com/liquibase:0.0.6

  postgres-start-image:
    desc: start docker postgres docker
    cmds:
      - task: postgres-stop
      - rm -rf {{.DEV_DOCKER_POSTGRES_DATA_DIR}}
      - install -d -m 0700 {{.DEV_DOCKER_POSTGRES_DATA_DIR}}
      - docker run -d --name postgres -p {{.PGPORT}}:5432 --rm --user {{.USER_ID}}:{{.GROUP_ID}} -v /etc/passwd:/etc/passwd:ro -v {{.DEV_DOCKER_POSTGRES_DATA_DIR}}:/var/lib/postgresql/data postgres:10.3
      - sleep 5

